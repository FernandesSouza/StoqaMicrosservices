// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Stoqa.Infra.ORM.Context;

#nullable disable

namespace Stoqa.OrderCatalog.Infraestrutura.ORM.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Stoqa.Order.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("city")
                        .HasColumnOrder(4);

                    b.Property<string>("Complement")
                        .HasColumnType("varchar(150)")
                        .HasColumnName("complement")
                        .HasColumnOrder(6);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("country")
                        .HasColumnOrder(9);

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("district")
                        .HasColumnOrder(3);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("number")
                        .HasColumnOrder(5);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("state")
                        .HasColumnOrder(7);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("street")
                        .HasColumnOrder(2);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("zipCode")
                        .HasColumnOrder(8);

                    b.HasKey("Id");

                    b.ToTable("Address", "Stoqa");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Collaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasColumnOrder(7);

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("document")
                        .HasColumnOrder(4);

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint")
                        .HasColumnName("gender")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("password")
                        .HasColumnOrder(3);

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint")
                        .HasColumnName("role")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Collaborator", "Stoqa");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasColumnOrder(4);

                    b.Property<byte>("CustomerType")
                        .HasColumnType("tinyint")
                        .HasColumnName("customerType")
                        .HasColumnOrder(5);

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("document")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Customer", "Stoqa");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Orders", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("code")
                        .HasColumnOrder(3);

                    b.Property<Guid>("CollaboratorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("collaboratorId")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId")
                        .IsUnique();

                    b.ToTable("Order", "Stoqa");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.PackagingComposition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level")
                        .HasColumnOrder(1);

                    b.Property<byte>("Packing")
                        .HasColumnType("tinyint")
                        .HasColumnName("packing")
                        .HasColumnOrder(4);

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint")
                        .HasColumnName("productId")
                        .HasColumnOrder(3);

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PackagingComposition", "Stoqa");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("active")
                        .HasColumnOrder(6);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code")
                        .HasColumnOrder(5);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasColumnOrder(7);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.ToTable("Product", "Stoqa");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Return", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Approved")
                        .HasColumnType("bit")
                        .HasColumnName("approved")
                        .HasColumnOrder(3);

                    b.Property<string>("Code")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("createDate")
                        .HasColumnOrder(5);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description")
                        .HasColumnOrder(2);

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("orderId")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Return", "Stoqa");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Sale", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    b.Property<string>("Invoice")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("invoice")
                        .HasColumnOrder(2);

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("orderId")
                        .HasColumnOrder(5);

                    b.Property<bool>("Shipping")
                        .HasColumnType("bit")
                        .HasColumnName("shipping")
                        .HasColumnOrder(4);

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("value")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Sale", "Stoqa");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Transport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Freight")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("freight")
                        .HasColumnOrder(3);

                    b.Property<decimal>("StandardQuote")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("standardQuote")
                        .HasColumnOrder(5);

                    b.Property<string>("TrackingCode")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("trackingCode")
                        .HasColumnOrder(4);

                    b.Property<byte>("TransportType")
                        .HasColumnType("tinyint")
                        .HasColumnName("transportType")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("Transport", "Stoqa");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Collaborator", b =>
                {
                    b.HasOne("Stoqa.Order.Domain.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Stoqa.OrderCatalog.Domain.Entities.Collaborator", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Stoqa.Order.Domain.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("Stoqa.OrderCatalog.Domain.Entities.Customer", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Orders", b =>
                {
                    b.HasOne("Stoqa.OrderCatalog.Domain.Entities.Collaborator", "Collaborator")
                        .WithOne()
                        .HasForeignKey("Stoqa.OrderCatalog.Domain.Entities.Orders", "CollaboratorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Collaborator");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.PackagingComposition", b =>
                {
                    b.HasOne("Stoqa.OrderCatalog.Domain.Entities.Product", null)
                        .WithMany("PackingCompositions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Product", b =>
                {
                    b.HasOne("Stoqa.OrderCatalog.Domain.Entities.Orders", null)
                        .WithMany("Product")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Return", b =>
                {
                    b.HasOne("Stoqa.OrderCatalog.Domain.Entities.Orders", null)
                        .WithOne("Return")
                        .HasForeignKey("Stoqa.OrderCatalog.Domain.Entities.Return", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stoqa.OrderCatalog.Domain.Entities.Transport", "Transport")
                        .WithOne()
                        .HasForeignKey("Stoqa.OrderCatalog.Domain.Entities.Return", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Stoqa.OrderCatalog.Domain.Entities.Customer", "Customer")
                        .WithOne()
                        .HasForeignKey("Stoqa.OrderCatalog.Domain.Entities.Sale", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stoqa.OrderCatalog.Domain.Entities.Orders", null)
                        .WithOne("Sale")
                        .HasForeignKey("Stoqa.OrderCatalog.Domain.Entities.Sale", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Stoqa.OrderCatalog.Domain.Entities.Transport", "Transport")
                        .WithOne()
                        .HasForeignKey("Stoqa.OrderCatalog.Domain.Entities.Sale", "OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Orders", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("Return");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("Stoqa.OrderCatalog.Domain.Entities.Product", b =>
                {
                    b.Navigation("PackingCompositions");
                });
#pragma warning restore 612, 618
        }
    }
}
